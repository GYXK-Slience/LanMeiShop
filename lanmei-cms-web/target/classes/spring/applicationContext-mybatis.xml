<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.23.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	
	<description>mybatis Configuration</description>
	
	 <context:component-scan base-package="com.lanmei.*.*"></context:component-scan>
	<!-- 引入数据库配置文件 -->
	<context:property-placeholder location="classpath:mysqljdbc.properties" />
    <!-- 事务管理器:基于jdbc,ibatis,mybaits的spring事务管理 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 开启注解事务管理器 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 配置事务通知属性 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<!-- 定义事务传播属性 -->
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="list*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 配置事务切面,service包中的类会被代理 -->
	<!-- <aop:config>
		<aop:pointcut id="txPointcut"
			expression="execution(* org.pussinboots.morning.*.service.impl.*.*(..))" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="txPointcut" />
	</aop:config>  -->
	<bean id="convertPwdPropertyConfigurer" class="com.lanmei.cms.common.jdbc.encrypt.ConvertPwdPropertyConfigurer"
		p:locations="classpath:mysqljdbc.properties"
		p:fileEncoding="utf-8"		
	/>
	
     <bean id="convertPwdPropertyConfigurer1" class="com.lanmei.cms.common.jdbc.encrypt.ConvertPwdPropertyConfigurer1"
		p:locations="classpath:mysqljdbc.properties"
		p:fileEncoding="utf-8"
		depends-on="convertPwdPropertyConfigurer"  
	/>
	<!-- 数据源配置,使用Druid数据库连接池 -->
 	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写,Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.init}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />

		<!-- 配置间隔多久才进行一次检测,检测需要关闭的空闲连接,单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />

	<!-- 	配置一个连接在池中最小生存的时间,单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache,并且指定每个连接上PSCache的大小（Oracle使用）  -->
		<property name="poolPreparedStatements" value="true" /> 
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="config,stat" />
    	 <property name="connectionProperties" value="config.decrypt=true;config.decrypt.key=${jdbc.publicKey}" />
	</bean> 
	
    
	 <bean id="dataSource1"
		  class="org.apache.ibatis.datasource.pooled.PooledDataSource">		  
		  <property name="url" value="${jdbc.url}"/>
		  <property name="driver" value="${jdbc.driver}"/>
		  <property name="username" value="${jdbc.username}"/>
		  <property name="password" value="${jdbc.password}"/>
	</bean>
	<!-- 
	    plugins在配置文件中的位置必须符合要求，否则会报错，顺序如下:
	    properties?, settings?, 
	    typeAliases?, typeHandlers?, 
	    objectFactory?,objectWrapperFactory?, 
	    plugins?, 
	    environments?, databaseIdProvider?, mappers?
	-->
	

	<!-- MyBatis SqlSessionFactoryBean 配置 -->
	<bean id="sqlSessionFactory" 
	      class="org.mybatis.spring.SqlSessionFactoryBean">
	      
	      <property name="configLocation" value="classpath:/config/mybatis-config.xml"/>
	      <property name="dataSource" ref="dataSource"  />
	      <property name="mapperLocations" >
	      	<array>
	      		<value>classpath:com/lanmei/*/dao/mapper/*.xml</value>
	      	</array>
	      </property>
	 	      
	      <property name="typeAliasesPackage" value="com.lanmei.*.dao.model">
	      
	      </property>
	   
		
	</bean>

	
	<!-- MyBatis 动态实现:DAO接口所在包名,Spring会自动查找其下的类 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 对Dao 接口动态实现,需要知道接口在哪 -->
		<property name="basePackage" value="com.lanmei.**.mapper,com.lanmei.sysaop.dao.syslog.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>



</beans>